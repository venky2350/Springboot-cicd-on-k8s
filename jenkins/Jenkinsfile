pipeline {
  agent any

  tools {
    maven 'Maven 3.9.6'
    jdk 'JDK 17'
  }

  environment {
    SONARQUBE = 'SonarQube'
    DOCKER_IMAGE = 'venkatesh384/jenkins-demo'
    IMAGE_TAG = "${BUILD_NUMBER}"
    NGINX_IMAGE = 'venkatesh384/nginx-reverse-proxy'
  }

  stages {

    stage('üì• Checkout') {
      steps {
        git 'https://github.com/venky2350/Springboot-cicd-on-k8s.git'
      }
    }

    stage('üî® Maven Build') {
      steps {
        dir('app') {
          sh 'mvn clean package'
        }
      }
    }

    stage('üîé SonarQube Analysis') {
      steps {
        dir('app') {
          withSonarQubeEnv("${SONARQUBE}") {
            withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_TOKEN')]) {
              sh '''
                set -e
                mvn clean verify sonar:sonar -U \
                  -Dsonar.projectKey=Springboot-cicd-on-k8s \
                  -Dsonar.projectName='Springboot-cicd-on-k8s' \
                  -Dsonar.host.url=http://54.162.210.95:9000 \
                  -Dsonar.token=$SONAR_TOKEN
              '''
            }
          }
        }
      }
    }

    stage('üìÑ Generate Sonar HTML Report') {
      steps {
        dir('app') {
          withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_TOKEN')]) {
            sh './scripts/generate-sonar-html.sh'
          }
        }
      }
    }

    stage('üê≥ Docker Build & Push') {
      steps {
        withCredentials([usernamePassword(
          credentialsId: 'dockerhub-creds',
          usernameVariable: 'DOCKER_USERNAME',
          passwordVariable: 'DOCKER_PASSWORD'
        )]) {
          dir('app') {
            sh '''
              echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
              docker build -t $DOCKER_IMAGE:$IMAGE_TAG .
              docker push $DOCKER_IMAGE:$IMAGE_TAG
            '''
          }
        }
      }
    }

    stage('üîê Trivy Security Scan') {
      steps {
        dir('trivy') {
          withEnv(["IMAGE_NAME=${DOCKER_IMAGE}:${IMAGE_TAG}"]) {
            sh '''
              set -e
              if command -v trivy >/dev/null 2>&1; then
                echo "üîé Running Trivy security scan on $IMAGE_NAME..."
                ./scan-trivy.sh
              else
                echo "‚ö†Ô∏è Trivy not found ‚Äì skipping image scan."
              fi
            '''
          }
        }
      }
    }

    stage('üìÑ Copy Reports') {
      steps {
        sh '''
          mkdir -p reports
          cp trivy-reports/image-scan-report.txt reports/trivy-report.txt || echo "‚ö†Ô∏è No Trivy text report found."
          cp trivy-reports/report.json reports/trivy-report.json || echo "‚ö†Ô∏è No Trivy JSON report found."
          cp app/target/sonar-report/index.html reports/sonar-report.html || echo "‚ö†Ô∏è No Sonar HTML report found."
        '''
        archiveArtifacts artifacts: 'reports/**', allowEmptyArchive: true
      }
    }

    stage('üöÄ Deploy with Helm') {
      agent {
        docker {
          image 'lachlanevenson/k8s-helm:latest'
        }
      }
      steps {
        dir('jenkins-demo-chart') {
          sh '''
            set -e
            helm upgrade --install jenkins-demo . \
              --namespace dev --create-namespace \
              --set springApp.image=$DOCKER_IMAGE:$IMAGE_TAG \
              --set nginx.image=$NGINX_IMAGE:$IMAGE_TAG

            kubectl rollout status deployment/spring-app -n dev
            kubectl get all -n dev
          '''
        }
      }
    }

    stage('üß± Nginx Docker Build & Push') {
      steps {
        withCredentials([usernamePassword(
          credentialsId: 'dockerhub-creds',
          usernameVariable: 'DOCKER_USERNAME',
          passwordVariable: 'DOCKER_PASSWORD'
        )]) {
          dir('nginx') {
            sh '''
              echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

              [ -f default.conf ] || { echo "‚ùå default.conf missing!"; exit 1; }
              [ -f index.html ] || { echo "‚ùå index.html missing!"; exit 1; }
              [ -f ../app/target/sonar-report/index.html ] || {
                echo "‚ö†Ô∏è sonar-report.html not found. Creating a placeholder..."
                mkdir -p reports
                echo "<html><body><h2>No Sonar Report Found</h2></body></html>" > reports/sonar-report.html
              }

              docker build -t $NGINX_IMAGE:$IMAGE_TAG .
              docker push $NGINX_IMAGE:$IMAGE_TAG
            '''
          }
        }
      }
    }
  }

  post {
    always {
      echo "üßπ Cleaning workspace..."
      cleanWs()
    }
  }
}
