pipeline {
  agent any

  tools {
    maven 'Maven 3.8.7'
    jdk 'JDK 17'
  }

  environment {
    SONARQUBE = 'SonarQube'
    DOCKER_IMAGE = 'venkatesh384/jenkins-demo'
    IMAGE_TAG = "${BUILD_NUMBER}"
    REGISTRY_CREDS = 'dockerhub-creds'
    CHART_PATH = 'jenkins-demo-chart'
    APP_DIR = 'app'
  }

  stages {

    stage('üì• Checkout') {
      steps {
        git 'https://github.com/venky2350/Springboot-cicd-on-k8s.git'
      }
    }

    stage('üî® Maven Build') {
      steps {
        dir("${APP_DIR}") {
          sh 'mvn clean package -DskipTests'
        }
      }
    }

    stage('üîé SonarQube Analysis') {
      steps {
        dir("${APP_DIR}") {
          withSonarQubeEnv("${SONARQUBE}") {
            withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_TOKEN')]) {
              sh '''
                mvn clean verify sonar:sonar \
                  -Dsonar.projectKey=Springboot-cicd-on-k8s \
                  -Dsonar.projectName='Springboot-cicd-on-k8s' \
                  -Dsonar.host.url=http://54.89.64.107:9000 \
                  -Dsonar.token=$SONAR_TOKEN
              '''
            }
          }
        }
      }
    }

    stage('üê≥ Docker Build & Push') {
      steps {
        withCredentials([usernamePassword(credentialsId: "${REGISTRY_CREDS}", usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
          dir("${APP_DIR}") {
            sh '''
              echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
              docker build -t $DOCKER_IMAGE:$IMAGE_TAG .
              docker push $DOCKER_IMAGE:$IMAGE_TAG
            '''
          }
        }
      }
    }

    stage('üîê Trivy Security Scan') {
      steps {
        dir('trivy') {
          withEnv(["IMAGE_NAME=${DOCKER_IMAGE}:${IMAGE_TAG}"]) {
            sh '''
              if command -v trivy >/dev/null 2>&1; then
                echo "üîé Running Trivy scan..."
                chmod +x scan-trivy.sh
                ./scan-trivy.sh
              else
                echo "‚ö†Ô∏è Trivy not installed, skipping."
              fi
            '''
          }
        }
      }
    }

    stage('üöÄ Deploy with Helm') {
      steps {
        script {
          docker.image('lachlanevenson/k8s-helm:latest')
                .inside('-v $HOME/.kube:/root/.kube --entrypoint=""') {
            withEnv(["KUBECONFIG=/root/.kube/config"]) {
              dir("${CHART_PATH}") {
                sh '''
                  helm upgrade --install jenkins-demo . \
                    --namespace dev --create-namespace \
                    --set springApp.image=$DOCKER_IMAGE:$IMAGE_TAG

                  kubectl rollout status deployment/spring-app -n dev
                  kubectl get all -n dev
                '''
              }
            }
          }
        }
      }
    }
  }

  post {
    always {
      echo "üßπ Cleaning workspace..."
      cleanWs()
    }
  }
}
