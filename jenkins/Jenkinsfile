pipeline {
  agent any

  tools {
    maven 'Maven 3.8.7'
    jdk 'JDK 17'
  }

  environment {
    SONARQUBE       = 'SonarQube'
    DOCKER_IMAGE    = 'venkatesh384/jenkins-demo'
    IMAGE_TAG       = "${BUILD_NUMBER}"
    REGISTRY_CREDS  = 'dockerhub-creds'
    KUBECONFIG      = '/var/lib/jenkins/.kube/config'
    APP_DIR         = 'app'
    MANIFEST_DIR    = 'manifests'
  }

  stages {

    stage('📥 Checkout') {
      steps {
        git 'https://github.com/venky2350/Springboot-cicd-on-k8s.git'
      }
    }

    stage('🔨 Maven Build') {
      steps {
        dir("${APP_DIR}") {
          sh 'mvn clean package -DskipTests'
        }
      }
    }

    stage('🔎 SonarQube Analysis') {
      steps {
        dir("${APP_DIR}") {
          withSonarQubeEnv("${SONARQUBE}") {
            withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_TOKEN')]) {
              sh '''
                mvn verify sonar:sonar \
                  -Dsonar.projectKey=Springboot-cicd-on-k8s \
                  -Dsonar.projectName=Springboot-cicd-on-k8s \
                  -Dsonar.host.url=$SONAR_HOST_URL \
                  -Dsonar.token=$SONAR_TOKEN
              '''
            }
          }
        }
      }
    }

    stage('🐳 Docker Build & Push') {
      steps {
        withCredentials([usernamePassword(
          credentialsId: "${REGISTRY_CREDS}",
          usernameVariable: 'DOCKER_USERNAME',
          passwordVariable: 'DOCKER_PASSWORD'
        )]) {
          dir("${APP_DIR}") {
            sh '''
              echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
              docker build -t $DOCKER_IMAGE:$IMAGE_TAG .
              docker push $DOCKER_IMAGE:$IMAGE_TAG
            '''
          }
        }
      }
    }

    stage('🔐 Trivy Security Scan') {
      steps {
        dir('trivy') {
          withEnv(["IMAGE_NAME=${DOCKER_IMAGE}:${IMAGE_TAG}"]) {
            sh '''
              echo "🔎 Checking for Trivy installation..."
              if command -v trivy >/dev/null 2>&1; then
                echo "✅ Trivy is available, running scan..."
                chmod +x scan-trivy.sh
                ./scan-trivy.sh
              else
                echo "⚠️ Trivy not installed. Skipping scan."
              fi
            '''
          }
        }
      }
    }

    stage('🚀 Deploy with Kubernetes Manifests') {
      steps {
        dir("${MANIFEST_DIR}") {
          withEnv(["KUBECONFIG=${KUBECONFIG}"]) {
            sh '''
              echo "📦 Kubernetes Client Version:"
              kubectl version --client

              echo "🛠️ Applying namespace (if not exists)..."
              kubectl apply -f namespace.yaml || echo "Namespace may already exist"

              echo "🛠️ Updating deployment image..."
              sed -i "s|image: .*|image: $DOCKER_IMAGE:$IMAGE_TAG|" deployment.yaml

              echo "🚀 Applying manifests..."
              kubectl apply -f deployment.yaml
              kubectl apply -f service.yaml

              echo "📈 Waiting for rollout..."
              kubectl rollout status deployment/jenkins-demo -n dev
              kubectl get all -n dev
            '''
          }
        }
      }
    }
  }

  post {
    always {
      echo "🧹 Cleaning workspace..."
      cleanWs()
    }
  }
}
